{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the NovaScope Exemplary Downstream Analysis (NEDA) Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This document serves as a guide for exemplary downstream analysis of spatial transcriptomics data generated from NovaScope. The main functionalities include:</p> <p>1) Pixel-level Analysis:     This feature enables the identification of spatial factors at a pixel-level resolution using a hexagon-indexed spatial digital gene expression matrix (SGE).</p> <p>2) Cell Segmentation-based Analysis:      This feature facilitates the aggregation of spatial transcriptomics data at the cellular level based on histology files and supports the analysis of cell type clusters using the cell-indexed SGE.</p>"},{"location":"#references","title":"References","text":"<p>For additional information, please refer to the following links:</p> <ul> <li>NovaScope Protocol Preprint </li> <li>NovaScope</li> <li>FICTURE</li> </ul>"},{"location":"analysis/cell_idx/intro/","title":"Cell Segmentation-based Analysis","text":"<p>This is an example to illustrate aggregating the spatial transcriptomic data from NovaScope at the cell level, and clustering those identified cells using Seurat build-in graph-based clustering approach. </p> <p> Figure 2: A Brief Overview of the Inputs, Outputs, and Process Steps for Cell Segmentation-based Analysis. SGE: spatial digital gene expression matrix; UMAP: Uniform Manifold Approximation and Projection.</p>"},{"location":"analysis/cell_idx/intro/#step-by-step-procedure","title":"Step-by-Step Procedure","text":"<p>Before beginning the analysis, ensure that NEDA and its dependencies are installed. Follow these steps as outlined:</p> <ol> <li> <p>Create a cell-indexed spatial digital gene expression matrix. This step requires the users manually perform histology-based cell segmentation outside of NEDA using methods such as Watershed and Cellpose. </p> </li> <li> <p>Apply Seurat to identify cell type clusters for those staining-based segmented cells.</p> </li> </ol>"},{"location":"analysis/cell_idx/prepare_data/","title":"Preparing Input Dataset","text":""},{"location":"analysis/cell_idx/prepare_data/#mandatory-input-files","title":"Mandatory Input Files:","text":"<p>The following required input files can be generated using NovaScope.</p>"},{"location":"analysis/cell_idx/prepare_data/#1-a-referenced-histology-file","title":"(1) A referenced Histology File:","text":"<ul> <li>Description: The input histology file must be a referenced histology file in GeoTIFF format, enabling coordinate transformation between the input Spatial Gene Expression (SGE) matrix and the histology image. This means the histology file must be aligned with and match the dimensions of the input SGE matrix.</li> <li>Preparation: This histology file can be prepared manually or using NovaScope. For more details on preparing the histology file with NovaScope, refer to Rule <code>historef</code> in NovaScope.</li> </ul>"},{"location":"analysis/cell_idx/prepare_data/#2-a-spatial-digital-gene-expression-sge-matrix-in-10x-genomics-format","title":"(2) A Spatial Digital Gene Expression (SGE) Matrix in 10x genomics Format:","text":"<ul> <li>Description: A transcript-indexed SGE matrix in 10x Genomics format contains spatial barcodes, gene, and UMI counts for all available genomic features. Each SGE dataset is composed of <code>features.tsv.gz</code>, <code>barcodes.tsv.gz</code>, and <code>matrix.mtx.gz</code>. </li> <li>Preparation: The SGE matrix could be prepared via Rule dge2sdge in NovaScope.</li> </ul>"},{"location":"analysis/cell_idx/prepare_data/#example-datasets","title":"Example Datasets","text":"<p>NEDA provides two example datasets for this Cell Segmentation-based Analysis, including the Shallow Liver Section Dataset and Deep Liver Section Dataset. Each dataset contains the input transcript-indexed SGE and histology files. We also provide the the cell segment mask from Cellposeas well as the black and white boundary TIF image from Watershed.</p> <p>Details on these datasets and download instructions are available in Accessing Example Datasets.</p>"},{"location":"analysis/cell_idx/step1-cell_SGE/","title":"Step1. Prepare Cell-indexed Spatial Digital Gene Expression Matrix","text":""},{"location":"analysis/cell_idx/step1-cell_SGE/#set-up-computing-environment","title":"Set Up Computing Environment","text":"<p>Ensure that your computing environment is properly configured before each step.</p> <pre><code>## Load modules, if applicable.\n## For non-HPC user, use `export` to set the paths for following softwares, e.g., `export R=&lt;path_to_R&gt;`.\nmodule load R/4.2.0                                \n\n## Activate Python environment\n## If your Python environment was not set up using venv, replace the following lines with the appropriate commands to activate the environment.\npy_env=\"&lt;path_to_python_env&gt;\"                           ## replace &lt;path_to_python_env&gt; with the path to the python environment\nsource ${py_env}/bin/activate\nexport python=${py_env}/bin/python\n\n## Define NEDA\nneda=/path/to/the/NEDA/repository  # Replace with the path to the NEDA repository\n\n## Specify directories for input and output files\nsge_dir=/path/to/the/sge                                ## Replace with the path to the directory containing input SGE\n\n## Specify paths for segmentation files (depends on the segmentation technique used)\nwatershed_tiff=/path/to/watershed/segmentation/tiff     ## (For Watershed) Replace with the path to the black-and-white cell segmentation TIFF image\ncellpose_npy=/path/to/cellpose/segmentation/npg         ## (For Cellpose) Replace with the path to the Cellpose output npy file\n\n# Specify output directory and prefix\noutput_dir=/path/to/the/output/directory                ## Replace with your output directory\nprefix=&lt;output_prefix&gt;                                  ## Replace with your output prefix, e.g., watershed\n</code></pre>"},{"location":"analysis/cell_idx/step1-cell_SGE/#step-11-prepare-histology-based-cell-segmentation-mask-matrix","title":"Step 1.1 Prepare Histology-based Cell Segmentation Mask Matrix","text":"<p>To construct a cell-indexed spatial digital gene expression matrix (SGE), begin by executing histology-based cell segmentation using external methodologies, such as Watershed or Cellpose. Details for performing histology-based cell segmentation using Watershed and Cellpose are provided in the NovaScope Protocol paper. </p> <p>Note</p> <p>Irrespective of the segmentation technique used, ensure that the input histology image is aligned with the input SGE. </p> <p>This alignment involves referencing and resizing the histology image to match the SGE coordinates and dimensions, which can be accomplished by Rule <code>historef</code> in NovaScope.</p>"},{"location":"analysis/cell_idx/step1-cell_SGE/#watershed","title":"Watershed","text":"<p>Watershed outputs a black-and-white cell segmentation TIFF image (please see an example below) where white areas represent cell segments and black areas are non-tissue regions or cell boundaries. NEDA provides <code>make_segmask.py</code> to convert this image into a segmentation mask matrix in <code>NumPy</code> array format.</p> <p>Input &amp; Output <pre><code># Input: \n$watershed_tiff                                         ## a user-defined black-and-white cell segmentation TIFF image\n\n# Output: \n${output_dir}/${prefix}_areas.png\n${output_dir}/${prefix}_seg.npy                         ## segmentation mask matrix in the NumPy array format\n</code></pre></p> <p>Commands: <pre><code>python $neda/scripts/make_segmask.py \\\n   --input ${watershed_tiff} \\\n   --outpref ${output_dir}/${prefix}\n</code></pre></p> <p>Examples:</p> <p> Figure 3: A black-and-white cell segmentation TIFF image from Watershed. </p>"},{"location":"analysis/cell_idx/step1-cell_SGE/#cellpose","title":"Cellpose","text":"<p>Cellpose produces an <code>npy</code> file that serves as the segmentation mask matrix in <code>NumPy</code> array format. No additional action is required with NEDA.</p>"},{"location":"analysis/cell_idx/step1-cell_SGE/#step12-create-cell-indexed-spatial-digital-gene-expression-matrix","title":"Step1.2 Create cell-indexed spatial digital gene expression matrix","text":"<p>Use the histology-based cell segmentation mask matrix file from Step1.1 to aggregate spatial transcriptomic data at the cellular level. NEDA\u2019s <code>make_sge_from_npy.py</code> script is utilized here. Note that the npy file from Watershed and Cellpose differs, so the script requires specifying the <code>--approach</code>. This step creates a cell-indexed SGE in 10x genomics format.</p>"},{"location":"analysis/cell_idx/step1-cell_SGE/#watershed_1","title":"Watershed","text":"<p>Input &amp; Output <pre><code># Input: \n$sge_dir                                            ## directory containing barcodes.tsv.gz, features.tsv.gz, matrix.mtx.gz\n${output_dir}/${prefix}_seg.npy                     ## segmentation mask matrix in NumPy array format\n\n# Output: \n${output_dir}/${prefix}/barcodes.tsv.gz            \n${output_dir}/${prefix}/features.tsv.gz \n${output_dir}/${prefix}/matrix.mtx.gz\n</code></pre></p> <p>Commands: <pre><code>python ${neda}/scripts/make_sge_from_npy.py \\\n   --input ${output_dir}/${prefix}_seg.npy \\\n   --approach Watershed \\\n   --sge_dir ${sge_dir} \\\n   --output_dir ${output_dir}/${prefix}\n</code></pre></p>"},{"location":"analysis/cell_idx/step1-cell_SGE/#cellpose_1","title":"Cellpose","text":"<p>Input &amp; Output <pre><code># Input: \n$sge_dir                                            ## directory containing barcodes.tsv.gz, features.tsv.gz, matrix.mtx.gz\n$cellpose_npy                                       ## user-defined Cellpose output segmentation mask matrix in NumPy array format\n\n# Output: \n${output_dir}/${prefix}/barcodes.tsv.gz            \n${output_dir}/${prefix}/features.tsv.gz \n${output_dir}/${prefix}/matrix.mtx.gz\n</code></pre></p> <p>Commands: <pre><code>python ${neda}/scripts/make_sge_from_npy.py \\\n   --input ${cellpose_npy} \\\n   --approach Cellpose \\\n   --sge_dir ${sge_dir} \\\n   --output_dir ${output_dir}/${prefix}\n</code></pre></p>"},{"location":"analysis/cell_idx/step2-Seurat-clustering/","title":"Step 2. Inferring Cell Type Factors using Seurat","text":"<p>This example demonstrates how to infer cell type factors from a cell-indexed SGE using <code>Seurat</code>.</p> <p>This step starts with removing mitochondrial and hypothetical genes and filtering the hexagon-indexed SGE matrix by <code>nFeature_RNA_cutoff</code>. When X Y coordinate ranges are applied, the hexagon-indexed SGE matrix will also be filtered by coordinates. </p> <p>Subsequently, this step applies sctransform normalization followed by dimensionality reduction through Principal Component Analysis (PCA) and Uniform Manifold Approximation and Projection (UMAP) embedding.</p> <p>Next, the step employs <code>FindClusters</code> to segregate hexagons into clusters utilizing a shared nearest neighbor (SNN) modularity optimization-based clustering algorithm. During this process, <code>FindClusters</code> applies an argument of <code>resolution</code> to determine the \"granularity\" of clusters, i.e., a higher resolution value yields more clusters. A range of <code>resolutions</code>, including 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, and 2, are applied to explore the optimal <code>resolution</code>. For each resolution, the step generates an UMAP for dimensionality reduction, a spatial plot to visualize the clusters and their spatial arrangement, and a CSV file of differentially expressed genes for each cluster.</p> <p>Additionally, this step generates a metadata file containing information on the cluster assignment for each hexagon, and an RDS (R Data Serialization) file that stores the complete Seurat object with all the compiled data.</p> <p>Input &amp; Output <pre><code># Input: \n${output_dir}/${prefix}/barcodes.tsv.gz                                          # the cell-indexed SGE matrix from step1\n${output_dir}/${prefix}/features.tsv.gz \n${output_dir}/${prefix}/matrix.mtx.gz\n\n# Output: \n${output_dir}/${prefix}_cutoff${nFeature_RNA_cutoff}_metadata.csv                ## a metadata file\n${output_dir}/${prefix}_cutoff${nFeature_RNA_cutoff}_SCT.RDS                     ## an RDS file\n${output_dir}/${prefix}_cutoff${nFeature_RNA_cutoff}_res${res}_DE.csv            ## Each resolution returns a CSV file of differentially expressed genes for each cluster\n${output_dir}/${prefix}_cutoff${nFeature_RNA_cutoff}_res${res}_DimSpatial.png    ## Each resolution returns an image of two panels including an UMAP for dimensionality reduction, a spatial plot to visualize the clusters and their spatial arrangement \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>--X_col</code>: Specify which part of the hexagon ID corresponds to the X coordinate. For instance, in our example dataset, the hexagon ID is formatted as <code>{X}_{Y}</code>, i.e., the X coordinate is the first component. In this case, <code>--X_col</code> set this argument to 1.  Default: 3.</li> <li><code>--Y_col</code>: Specify which part of the hexagon ID corresponds to the Y coordinate. As the Y coordinate is the second component in the example case, it should set to 2.  Default: 4.</li> <li><code>--nFeature_RNA_cutoff</code>: Cutoff value for filtering hexagons by nFeature_RNA. Since this cell-indexed SGE is derived from histology files, <code>nFeature_RNA_cutoff</code> is set to be 0.</li> </ul> <p>Commands: <pre><code>Rscript ${neda}/scripts/seurat_analysis.R \\\n    --input_dir ${output_dir}/${prefix} \\\n    --output_dir ${output_dir}/${prefix}/Seurat \\\n    --unit_id ${prefix} \\\n    --X_col 1 \\\n    --Y_col 2 \\\n    --nFeature_RNA_cutoff 0 \n</code></pre></p>"},{"location":"analysis/hex_idx/intro/","title":"Pixel-level Analysis","text":"<p>This section provides an example of how to identify spatial factors at pixel-level resolution in spatial transcriptomics data.</p>"},{"location":"analysis/hex_idx/intro/#analytical-strategies","title":"Analytical Strategies","text":"<p>NEDA currently offers two analytical strategies:</p> <p>1) Latent Dirichlet Allocation (LDA) + FICTURE: This strategy utilizes Latent Dirichlet Allocation (LDA) to identify spatial factors, and then uses FICTURE to map these factors onto a histological space with pixel-level resolution.</p> <p>2) Seurat + FICTURE:  This strategy uses multi-dimensional clustering via Seurat to explore cell type clusters and then projects those clusters into a histological space using FICTURE, achieving pixel-level resolution.</p>"},{"location":"analysis/hex_idx/intro/#a-step-by-step-procedure","title":"A Step-by-Step Procedure","text":"<p>Before beginning the analysis, ensure that NEDA and its dependencies are installed properly. Then, follow these steps as outlined:</p> <ol> <li> <p>Prepare your input dataset and its corresponding input configuration file.</p> </li> <li> <p>Set up your computing environment, and create minibatches for subsequent analysis.</p> </li> <li> <p>Choose the analytical strategy that best suits your project, either LDA or Seurat, to yield clusters or factors from your dataset.</p> </li> <li> <p>Transform and decode these clusters or factors on your input data at pixel-level resolution.</p> </li> </ol> <p>Each step contains detailed instructions for:</p> <ul> <li>the purpose of each step;</li> <li>the execution commands;</li> <li>necessary input and output files;</li> <li>definitions of auxiliary parameters, as outlined in the scripts for each step.</li> </ul>"},{"location":"analysis/hex_idx/intro/#an-overview","title":"An Overview","text":"<p> Figure 1: A Brief Overview of the Inputs, Outputs, and Process Steps for Pixel-level Analysis. </p>"},{"location":"analysis/hex_idx/job_config/","title":"Preparing the Input Configuration File","text":"<p>NEDA employs an input configuration file in text format to provide input/output paths and parameters.</p> <p>For this input configuration file, we provide:</p> <ul> <li>an input configuration template below,</li> <li>an example configuration files for LDA+FICTURE analysis: input_config_lda.txt,</li> <li>an example configuration files for Seurat+FICTURE analysis: input_config_seurat.txt.</li> </ul>"},{"location":"analysis/hex_idx/job_config/#essential-and-auxiliary-parameters","title":"Essential and Auxiliary Parameters","text":"<p>FICTURE uses numerous parameters at each step to ensure flexibility. NEDA simplifies data analysis by only requiring essential parameters in the input configuration file. Although some steps may require auxiliary parameters, NEDA adopts FICTURE's recommended defaults.</p> <p>If you wish to customize these defaults, refer to the <code>AUXILIARY PARAMS</code> section in the step scripts and the FICTURE documentation, but proceed with caution due to potential risks.</p>"},{"location":"analysis/hex_idx/job_config/#an-input-configuration-template","title":"An Input Configuration Template","text":"<pre><code>#=========================\n# Mandatory Fields\n#=========================\n## Input files\ninput_transcripts=/path/to/the/transcripts/file                     ## Path to the input spatial digital gene expression matrix (SGE) in FICTURE-compatible TSV format.\ninput_features=/path/to/the/feature/file                            ## Path to the input feature file.\ninput_xyrange=/path/to/the/xyrange                                  ## Path to the input meta file with minimum and maximum X Y coordinates.\n\n## (Model-Specific) Input Hexagon-Indexed SGE matrix \n# Those two analytical strategies in NEDA require input hexagon-indexed SGE matrix in different formats.\n# Choose your analytical strategy first, then define its required hexagon-indexed SGE matrix.\ninput_hexagon_sge_ficture=/path/to/the/hexagon/indexed/sge/ficture  ## (LDA-only) Path of hexagon-indexed SGE in the FICTURE-compatible TSV format.\ninput_hexagon_sge_10x_dir=/path/to/the/hexagon/indexed/sge/10x/dir  ## (Seurat-only) Directory of hexagon-indexed SGE in the 10x genomics format, which should have features.tsv.gz, barcodes.tsv.gz, and matrix.mtx.gz.\n\n## Output \noutput_dir=/path/to/the/output/directory/                           ## Directory for output files: LDA results will be saved in ${output_dir}/LDA, and Seurat results wil be in ${output_dir}/Seurat.\"\nprefix=&lt;prefix_of_output_files&gt;                                     ## Prefix for output files. The output files will be named using both this prefix and the following parameters.\n\n## Train model\ntrain_model=&lt;model_option&gt;                                          ## Define the analytical strategy. Options: \"LDA\", \"Seurat\".\n\n## Params\nmajor_axis=&lt;X_or_Y&gt;                                                 ## Typically, the major axis is the axis with a greater length. Options: \"X\", \"Y\". For instance, it is Y in the minimal testrun dataset whereas X in the shallow and deep liver datasets.\n\nsolo_feature=&lt;solo_feature&gt;                                         ## Select the genome feature. Options: \"gn\": Gene; \"gt\": GeneFull. See details at https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md.\ntrain_width=&lt;train_width&gt;                                           ## The side length of the hexagon (in micrometers), e.g., 18.\nfit_width=&lt;projection_width&gt;                                        ## Projection width, suggest to use one the same as the train width, e.g., 18.\nanchor_dist=&lt;archor_distance&gt;                                       ## Anchor point distance (in micrometers), e.g., 4.\n\n## (Model-Specific) params\n## - LDA\nnfactor=&lt;number_of_factors&gt;                                         ## (LDA-only) Number of factors, e.g., 12. For 'Seurat+FICTURE' analysis, remove it when preparing the configuration file; nf will be defined after clustering.\ntrain_n_epoch=&lt;number_of_epoch&gt;                                     ## (LDA-only) Epochs for LDA training, e.g., 3. For \"Seurat+FICTURE\" analysis, use \"NA\" or remove it.\n## - Seurat\n#nFeature_RNA_cutoff=&lt;the_optimal_cutoff&gt;                           ## (Seurat-only) After evaluating the performance of different cutoffs, define the optimal cutoff aiming at removing noises.\nres_of_interest=&lt;the_optimal_resolution&gt;                            ## (Seurat-only) After examining clustering results across all resolution settings, identify the optimal resolution.\n\n#=========================\n# Optional Fields\n#=========================\n#threads=&lt;number_of_cpus&gt;                                           ## (Optional) A integer to indicate how many CPUs will be applied. If absent, 1 thread will be applied.\n#seed=&lt;an_integer&gt;                                                  ## (Optional) A seed (integer, e.g., 2024030700) for reproducibility. This applies in the LDA factorization and choosing color maps. If omitted, a random seed will be utilized.\n</code></pre>"},{"location":"analysis/hex_idx/prepare_data/","title":"Preparing Input Dataset","text":"<p>The input spatial transcriptomics data can be generated using NovaScope. </p>"},{"location":"analysis/hex_idx/prepare_data/#input-files","title":"Input Files:","text":"<p>The following files are essential and can be prepared using NovaScope:</p>"},{"location":"analysis/hex_idx/prepare_data/#1-a-spatial-digital-gene-expression-sge-matrix-in-tsv-format","title":"(1) A Spatial Digital Gene Expression (SGE) Matrix in TSV format","text":"<ul> <li>Description: A Spatial Digital Gene Expression (SGE) matrix in FICTURE-compatible TSV format, containing information of spatial barcode, gene, and UMI count for each genomic feature by barcode and gene.</li> <li>Preparation: NovaScope facilitates the preparation of a raw SGE matrix via Rule sdgeAR_reformat and a filtered SGE matrix via Rule sdgeAR_polygonfilter. Both can serve as input files for NEDA. The filtered SGE matrix undergoes gene filtering and density-based polygon filtering in this format. Users can select the option that best suits their requirements. Our example uses the filtered SGE matrix as input.</li> </ul>"},{"location":"analysis/hex_idx/prepare_data/#2-a-tab-delimited-feature-file","title":"(2) A Tab-Delimited Feature File","text":"<ul> <li> <p>Description: A TSV file provides information of gene ID, gene name, and counts unique molecular identifiers (UMIs) for each genomic feature per gene.</p> </li> <li> <p>Preparation: NovaScope also offers two options for this file, including the one corresponds to the raw SGE matrix from Rule sdgeAR_reformat (naming convention: <code>*.feature.tsv.gz</code>), and the clean feature file that passed the filtering based on gene names, gene types, and number of UMIs per gene from Rule sdgeAR_featurefilter (naming convention: <code>*.feature.clean.tsv.gz</code>). Our example data uses the clean feature file.</p> </li> </ul> <p>(3) A Metadata File for X Y Coordinates: </p> <ul> <li>Description: This file contains the minimum and maximum X Y coordinates for the input SGE matrix.</li> <li>Preparation: When the input SGE matrix is prepared by NovaScope, it includes a corresponding meta file for coordinates. The naming conventions for the raw and filtered coordinate meta files are <code>*.raw.coordinate_minmax.tsv</code> and <code>*.filtered.coordinate_minmax.tsv</code>, respectively.</li> </ul> <p>(4) (Model-Specific) Hexagon-Indexed SGE Matrices:</p> <ul> <li>Description: The hexagon-indexed SGE matrix is created by segmenting pixels in the SGE matrix into hexagonal units, with the size defined by the user.</li> <li>Preparation: The required format for the hexagon-indexed SGE varies based on the chosen analytical strategy<ul> <li>For LDA+FICTURE analysis, provide a hexagon-indexed SGE matrix in FICTURE-compatible TSV format. This file can be generated using Rule sdgeAR_segment_ficture in NovaScope.</li> <li>For Seurat+FICTURE analysis, supply a hexagon-indexed SGE matrix in 10x Genomics format. This file can be generated using Rule sdgeAR_segment_10x in NovaScope.</li> </ul> </li> </ul>"},{"location":"analysis/hex_idx/prepare_data/#example-datasets","title":"Example Datasets","text":"<p>Alternatively, NEDA offers three example datasets, each suitable for input in spatial transcriptomic analysis within NEDA. For detailed information on these datasets and instructions on how to download them, see Accessing Example Datasets.</p>"},{"location":"analysis/hex_idx/step1-preprocess/","title":"Step 1. Preprocessing","text":""},{"location":"analysis/hex_idx/step1-preprocess/#set-up-computing-environment","title":"Set Up Computing Environment","text":"<p>Please ensure the computing environment is set up before each step. </p> <pre><code>## Load modules, if applicable.\n## For non-HPC user, use `export` to set the paths for following softwares, e.g., `export samtools=&lt;path_to_samtools&gt;`.\nmodule load Bioinformatics                          ## In this example, samtools is part of the Bioinformatics module system, requiring the Bioinformatics module to be loaded before accessing the specific program.\nmodule load samtools\nmodule load R/4.2.0                                 ## only required for Seurat+FICTURE analysis\n\n## Activate Python environment\n## If your Python environment was not set up using venv, replace the following lines with the appropriate commands to activate the environment.\npy_env=\"&lt;path_to_python_env&gt;\"                       ## replace &lt;path_to_python_env&gt; with the path to the python environment\nsource ${py_env}/bin/activate\nexport python=${py_env}/bin/python\n\n## Define NEDA\nneda_dir=\"&lt;path_to_the_NEDA_repository&gt;\"            ## replace &lt;path_to_the_NEDA_repository&gt; with the path to the NovaScope-exemplary-downstream-analysis repository\n\n## Specify the input configure file\ninput_configfile=\"&lt;path_to_input_data_and_params&gt;\"  ## replace &lt;path_to_input_data_and_params&gt; with the path to the config_job file, e.g., ${neda_dir}/config_job/input_config_lda.txt\n</code></pre>"},{"location":"analysis/hex_idx/step1-preprocess/#step-1-creating-minibatches","title":"Step 1 Creating Minibatches","text":"<p>Assigning minibatch label, and reordering the data based on the major axis so that they are locally contiguous. The output file has the same columns as input with an extra column (1st) being the minibatch IDs. </p> <p>Input &amp; Output <pre><code>#Input: \n$input_transcripts                                   ## user-defined input SGE matrix in FICTURE-compatible TSV format\n\n#Output: \n${output_dir}/${prefix}.batched.matrix.tsv.gz\n</code></pre></p> <p>Commands: <pre><code>$neda_dir/steps/step1-create-minibatch.sh $input_configfile\n</code></pre></p>"},{"location":"analysis/hex_idx/step2a-LDA/","title":"Step 2a. Infer Cell Type Factors using Latent Dirichlet Allocation (LDA).","text":"<p>This example illustrates inferring cell type factors using Latent Dirichlet Allocation (LDA). </p> <p>Prefix:</p> <p>We use prefixes to clarify input and output filenames in this documentation. These prefixes are automatically defined by the script; users do NOT need to define them manually.</p> <pre><code>train_prefix=\"${prefix}.${solo_feature}.nf${nfactor}.d_${train_width}.s_${train_n_epoch}\"\n</code></pre> <ul> <li>Variable details for the prefixes are in the Job Configuration.</li> </ul>"},{"location":"analysis/hex_idx/step2a-LDA/#step-2a2-lda-factorization","title":"Step 2a.2 LDA Factorization","text":"<p>An unsupervised learning of cell type factors using LDA.</p> <p>Input &amp; Output: <pre><code># Input:\n$input_features                                      ## user-defined input features in TSV format\n$input_hexagon_sge_ficture                           ## user-defined input hexagon-indexed SGE matrix in FICTURE-compatible format\n\n# Output: \n${output_dir}/${train_model}/${train_prefix}.model.p\n${output_dir}/${train_model}/${train_prefix}.model_matrix.tsv.gz\n${output_dir}/${train_model}/${train_prefix}.fit_result.tsv.gz\n${output_dir}/${train_model}/${train_prefix}.posterior.count.tsv.gz\n${output_dir}/${train_model}/${train_prefix}.coherence.tsv\n${output_dir}/${train_model}/${train_prefix}.model_selection_candidates.p\n</code></pre></p> <p>Commands: <pre><code>$neda_dir/steps/step2a.1-LDA-factorization.sh $input_configfile\n</code></pre></p>"},{"location":"analysis/hex_idx/step2a-LDA/#step-2a3-creating-marker-gene-reports","title":"Step 2a.3 Creating Marker Gene Reports","text":"<p>This step includes: generating a color table, identifying marker genes for each factor, and creating a report html file summarizing individual factors and marker genes.</p> <p>Input &amp; Output: <pre><code># Input:\n${output_dir}/${train_model}/${train_prefix}.fit_result.tsv.gz\n${output_dir}/${train_model}/${train_prefix}.posterior.count.tsv.gz\n\n# Output: \n${output_dir}/${train_model}/${train_prefix}.color.tsv\n${output_dir}/${train_model}/${train_prefix}.bulk_chisq.tsv\n${output_dir}/${train_model}/${train_prefix}.factor.info.html\n</code></pre></p> <p>Commands: <pre><code>$neda_dir/steps/step2a.2-LDA-factorization-report.sh $input_configfile\n</code></pre></p>"},{"location":"analysis/hex_idx/step2b-seurat/","title":"Step 2b. Inferring Cell Type Factors using Seurat","text":"<p>This example illustrates inferring cell type factors using Seurat. This process contains two stops that require manual evaluations at step 2b.2 and step 2b.4.</p> <p>Prefix:</p> <p>This documentation uses the following prefixes to illustrate input and output filenames, which are automatically assigned by the script.</p> <pre><code>train_prefix=\"${prefix}.${solo_feature}.nf${nfactor}.d_${train_width}.s_${train_n_epoch}\"\n</code></pre> <ul> <li>The <code>nfactor</code> will be determined in step 2b.5.</li> <li>Variable details for the prefixes are in the Job Configuration.</li> </ul>"},{"location":"analysis/hex_idx/step2b-seurat/#step-2b1-data-evaluation","title":"Step 2b.1 Data Evaluation","text":"<p>This step applies the <code>Seurat_analysis.R</code> script in test mode to</p> <ul> <li>assess and remove mitochondrial and hypothetical genes,</li> <li>examine the distribution of the number of spatial barcodes per hexagon (nCount_RNA) and the number of genes detected per hexagon (<code>Nfeature_RNA</code>),</li> <li>evaluate assess the performance of different nFeature_RNA thresholds \u2014 50, 100, 200, 300, 400, 500, 750, and 1000 \u2014 to filter the input hexagon-indexed SGE.</li> </ul> <p>Input &amp; Output <pre><code># Input: \n${input_hexagon_sge_10x_dir}/barcodes.tsv.gz                        ## user-defined input hexagon SGE in 10X Genomics format\n${input_hexagon_sge_10x_dir}/features.tsv.gz     \n${input_hexagon_sge_10x_dir}/matrix.mtx.gz  \n\n# Output: \n${output_dir}/${train_model}/Ncount_Nfeature_vln.png\n${output_dir}/${train_model}/nFeature_RNA_dist.png\n${output_dir}/${train_model}/nFeature_RNA_cutoff${cutoff}.png       ## a density plot with two panels, displaying the hexagon-indexed SGE before and after filtering by Nfeature_RNA, for each nFeature_RNA cutoff\n</code></pre></p> <p>Commands: <pre><code>$neda_dir/steps/step2b.1-Seurat-test-cutoff.sh $input_configfile\n</code></pre></p>"},{"location":"analysis/hex_idx/step2b-seurat/#step-2b2-manually-selecting-the-optimal-nfeature_rna-cutoff","title":"Step 2b.2 Manually Selecting the Optimal nFeature_RNA Cutoff","text":"<p>Examine density plots generated by step 2b.1 to choose the optimal <code>nFeature_RNA</code> cutoff to remove noise signals. For our example data, we applied a cut off of 500 for the deep liver section dataset, and 100 for the shallow liver section dataset and the minimal test dataset. It is optional to define x y ranges(<code>X_min</code>, <code>X_max</code>, <code>Y_min</code>, and <code>Y_max</code>).</p> <p>Define the following variables to the input configuration file.</p> <p>Example: <pre><code>nFeature_RNA_cutoff=100   \nX_min=2.5e+06\nX_max=1e+07\nY_min=1e+06\nY_max=6e+06\n</code></pre></p>"},{"location":"analysis/hex_idx/step2b-seurat/#step-2b3-seurat-clustering-analysis","title":"Step 2b.3 Seurat Clustering Analysis","text":"<p>This step starts with removing mitochondrial and hypothetical genes and filtering the hexagon-indexed SGE matrix by <code>nFeature_RNA_cutoff</code>. When X Y coordinate ranges are applied, the hexagon-indexed SGE matrix will also be filtered by coordinates.</p> <p>Subsequently, this step applies sctransform normalization followed by dimensionality reduction through Principal Component Analysis (PCA) and Uniform Manifold Approximation and Projection (UMAP) embedding.</p> <p>Next, the step employs <code>FindClusters</code> to segregate hexagons into clusters utilizing a shared nearest neighbor (SNN) modularity optimization-based clustering algorithm. During this process, <code>FindClusters</code> applies an argument of <code>resolution</code> to determine the \"granularity\" of clusters, i.e., a higher resolution value yields more clusters. A range of <code>resolutions</code>, including 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, and 2, are applied to explore the optimal <code>resolution</code>. For each resolution, the step generates an UMAP for dimensionality reduction, a spatial plot to visualize the clusters and their spatial arrangement, and a CSV file of differentially expressed genes for each cluster.</p> <p>Additionally, this step generates a metadata file containing information on the cluster assignment for each hexagon, and an RDS (R Data Serialization) file that stores the complete Seurat object with all the compiled data.</p> <p>Input &amp; Output <pre><code># Input: \n${input_hexagon_sge_10x_dir}/barcodes.tsv.gz                                                    ## user-defined input hexagon-indexed SGE in 10X Genomics-compatible format\n${input_hexagon_sge_10x_dir}/features.tsv.gz     \n${input_hexagon_sge_10x_dir}/matrix.mtx.gz     \n\n# Output: \n${output_dir}/${train_model}/${prefix}_cutoff${nFeature_RNA_cutoff}_metadata.csv                ## a metadata file\n${output_dir}/${train_model}/${prefix}_cutoff${nFeature_RNA_cutoff}_SCT.RDS                     ## an RDS file\n${output_dir}/${train_model}/${prefix}_cutoff${nFeature_RNA_cutoff}_res${res}_DE.csv            ## Each resolution returns a CSV file of differentially expressed genes for each cluster\n${output_dir}/${train_model}/${prefix}_cutoff${nFeature_RNA_cutoff}_res${res}_DimSpatial.png    ## Each resolution returns an image of two panels including an UMAP for dimensionality reduction, a spatial plot to visualize the clusters and their spatial arrangement \n</code></pre></p> <p>Commands: <pre><code>$neda_dir/steps/step2b.3-Seurat-clustering.sh $input_configfile\n</code></pre></p>"},{"location":"analysis/hex_idx/step2b-seurat/#step-2b4-manually-selecting-the-optimal-clustering-resolution","title":"Step 2b.4 Manually Selecting the Optimal Clustering Resolution","text":"<p>Examine the UMAP and spatial plots from the step 2b.3 and choose the optimal <code>resolution</code>. Then, save this chosen <code>resolution</code> into the input configuration file as the <code>res_of_interest</code> variable.</p> <p>Example: <pre><code>res_of_interest=1\n</code></pre></p>"},{"location":"analysis/hex_idx/step2b-seurat/#step-2b5-preparing-a-count-matrix","title":"Step 2b.5 Preparing a Count Matrix","text":"<p>Transform the metadata file into a count matrix to serve as the model matrix for the subsequent steps. This step automatically detects the number of clusters from the model matrix and assigns it as a <code>nfactor</code> variable in the input configuration file.</p> <p>Input &amp; Output <pre><code># Input:\n${input_hexagon_sge_10x_dir}/barcodes.tsv.gz                                                       ## user-defined input hexagon-indexed SGE in 10X Genomics-compatible format\n${input_hexagon_sge_10x_dir}/features.tsv.gz     \n${input_hexagon_sge_10x_dir}/matrix.mtx.gz     \n${output_dir}/${train_model}/${prefix}_cutoff${nFeature_RNA_cutoff}_metadata.csv                   ## the meta file from step 2b.3\n\n# Output: \n${output_dir}/${train_model}/${train_prefix}.model_matrix.tsv.gz\n</code></pre></p> <p>Commands: <pre><code>$neda_dir/steps/step2b.5-Seurat-count-matrix.sh $input_configfile\n</code></pre></p>"},{"location":"analysis/hex_idx/step3-transform/","title":"Step 3 Transform","text":"<p>Prefix:</p> <p>Prefixes will be automatically defined as follows. <pre><code>train_prefix=\"${prefix}.${solo_feature}.nf${nfactor}.d_${train_width}.s_${train_n_epoch}\"\ntranform_prefix=\"${train_prefix}.prj_${fit_width}.r_${anchor_dist}\"\n</code></pre></p> <ul> <li>See variables applied above in the Job Configuration.</li> </ul>"},{"location":"analysis/hex_idx/step3-transform/#step-31-transform","title":"Step 3.1 Transform","text":"<p>Convert to a factor space using the provided model, which includes gene names and potentially Dirichlet parameters. The pixel-level data will be organized into hexagonal groups.</p> <p>Input &amp; Output <pre><code># Input:\n$input_transcripts                                                      ## user-defined input SGE in FICTURE-compatible TSV format\n${output_dir}/${train_model}/${train_prefix}.model_matrix.tsv.gz        ## a model matrix from LDA (step2a) or from Seurat (step2b)\n\n# Output:\n${output_dir}/${train_model}/${tranform_prefix}.fit_result.tsv.gz\n${output_dir}/${train_model}/${tranform_prefix}.posterior.count.tsv.gz\n</code></pre></p> <p>Commands: <pre><code>$neda_dir/steps/step3.1-transform.sh $input_configfile\n</code></pre></p>"},{"location":"analysis/hex_idx/step3-transform/#step-32-transform-visualization","title":"Step 3.2 Transform Visualization","text":"<p>This step visualize the tranformed data using a coarse image that depict the distribution of each factor in hexagonally binned data, allowing for the inspection of spatial factor distribution patterns before conducting pixel-level analysis.</p> <p>For LDA, this step simply creates a symbolic link from the color table created at step 2a.3 and uses it to visualize the transformed data.</p> <p>For Seurat, this step creates a color table to visualize the transformed data.</p> <p>Input &amp; Output <pre><code># Input:\n${output_dir}/${train_model}/${train_prefix}.color.tsv                  ## (LDA-only) use the existing color table if available\n${output_dir}/${train_model}/${tranform_prefix}.fit_result.tsv.gz\n$input_xyrange                                                          ## user-defined input min max coordinates for SGE\n\n# Output:\n${output_dir}/${train_model}/${tranform_prefix}.rgb.tsv\n${output_dir}/${train_model}/${tranform_prefix}.top.png\n${output_dir}/${train_model}/${tranform_prefix}.png\n</code></pre></p> <p>Commands: <pre><code>$neda_dir/steps/step3.2-transform-visualization.sh $input_configfile\n</code></pre></p>"},{"location":"analysis/hex_idx/step4-decode/","title":"Step 4 Pixel-level Decoding","text":"<p>Prefix:</p> <p>The decode_prefix will be automatically defined as below. <pre><code>train_prefix=\"${prefix}.${solo_feature}.nf${nfactor}.d_${train_width}.s_${train_n_epoch}\"\ndecode_prefix=\"${train_prefix}.decode.prj_${fit_width}.r_${anchor_dist}_${neighbor_radius}\"\n</code></pre></p> <ul> <li><code>neighbor_radius</code>: represents the radius (um) of each anchor point's territory. By default, <code>neighbor_radius = anchor_dist + 1</code>.</li> <li>Other variables applied above are in the Job Configuration.</li> </ul>"},{"location":"analysis/hex_idx/step4-decode/#step-41-pixel-level-decoding","title":"Step 4.1 pixel-level Decoding.","text":"<p>Decode the model matrix on individual pixels, which returns a tab-delimited file of the posterior count of factors on individual pixels.</p> <p>Input &amp; Output <pre><code># Input:\n$input_xyrange                                                          ## user-defined input meta file for coordinates corresponding to the input SGE matrix\n${output_dir}/${prefix}.batched.matrix.tsv.gz                           ## pixel minibatches from step1\n${output_dir}/${train_model}/${train_prefix}.model_matrix.tsv.gz        ## a model matrix from LDA (step2a) or from Seurat (step2b)\n${output_dir}/${train_model}/${tranform_prefix}.fit_result.tsv.gz       ## transform data from step3\n\n# Output: \n${output_dir}/${train_model}/${decode_prefix}.pixel.sorted.tsv.gz\n</code></pre></p> <p>Commands: <pre><code>$neda_dir/steps/step4.1-pixel-level-decode.sh $input_configfile\n</code></pre></p>"},{"location":"analysis/hex_idx/step4-decode/#step-42-visualizing-pixel-level-decoding-and-generating-marker-gene-reports","title":"Step 4.2 Visualizing Pixel-Level Decoding and Generating Marker Gene Reports","text":"<p>Identify marker genes for each cluster, and generate a report html file that summarizes individual factors and marker genes. In addition, this step creates a high-resolution image of cell type factors for individual pixels using the color table generated at step 3.2.</p> <p>Input &amp; Output <pre><code># Input:\n${output_dir}/${train_model}/${decode_prefix}.posterior.count.tsv.gz\n${output_dir}/${train_model}/${tranform_prefix}.rgb.tsv\n\n# Output: \n${output_dir}/${train_model}/${decode_prefix}.bulk_chisq.tsv\n${output_dir}/${train_model}/${decode_prefix}.factor.info.html\n${output_dir}/${train_model}/${decode_prefix}.pixel.png\n</code></pre></p> <p>Commands: <pre><code>$neda_dir/steps/step4.2-pixel-level-visualization-and-report.sh $input_configfile\n</code></pre></p>"},{"location":"home/documentation_overview/","title":"Documentation Overview","text":"<p>The current documentation include the following sections:</p> <p>Home:</p> <ul> <li>Documentation Overview: Provides a summary of the contents and structure of NEDA.</li> </ul> <p>Installation:</p> <ul> <li>Installing NEDA: Guidelines on installing NEDA and its dependent software tools.</li> <li>Example Datasets: Information on accessing three provided example datasets.</li> </ul> <p>Pixel-level Analysis:</p> <ul> <li>Introduction: Introduction to Pixel-level Analysis in NEDA.</li> <li>Preparing Input Data: Overview of required input files.</li> <li>Preparing Job Configuration: Preparing the input configuration file.</li> <li>Preprocessing: Initialize computing environment and creating minibatches.</li> <li>LDA Factorization: Application of Latent Dirichlet Allocation (LDA) for spatial factor identification.</li> <li>Seurat Clustering: Multi-dimensional clustering with <code>Seurat</code> to identify cell types.</li> <li>Transform: Converting to a factor space using the provided model via <code>FICTURE</code>.</li> <li>Pixel-level Decoding: Decoding of pixel-level factors or clusters using <code>FICTURE</code>.</li> </ul> <p>Cell Segmentation-based Analysis:</p> <ul> <li>Introduction: An Overview of the prelimary single-cell analysis.</li> <li>Preparing Input Data: Details of required input files.</li> <li>Create Cell-indexed SGE: Computing environment setup and preparation of a cell-indexed spatial digital gene expression matrix.</li> <li>Seurat Clustering: Application of multi-dimensional clustering with <code>Seurat</code> for cell type factor inference.</li> </ul>"},{"location":"installation/example_data/","title":"Accessing Example Datasets","text":"<p>We have made available three datasets associated with the NovaScope protocol to be used as input for the NovaScope Exemplary Downstream Analysis (NEDA). </p>"},{"location":"installation/example_data/#data-overview","title":"Data Overview","text":"<p>Created using NovaScope, these datasets originate from FASTQ files derived from the same liver tissue section of an 8-week-old C57BL/6 wild-type male mouse. </p>"},{"location":"installation/example_data/#minimal-test-run-dataset","title":"Minimal Test Run Dataset","text":"<p>The minimal test run dataset was created using a subset of a liver section with a relatively shallow depth in the 2nd sequencing. This dataset is intended for preliminary testing of NEDA, primarily for validating NEDA scripts' functionality. It is not designed to yield biological insights.</p>"},{"location":"installation/example_data/#shallow-liver-section-dataset","title":"Shallow Liver Section Dataset","text":"<p>This dataset was generated by a Seq-Scope dataset for a tissue section, characterized by a relatively shallow 2nd-Seq library sequencing depth (i.e., approximately 163 million paired-end reads). The dataset from FASTQ files with such depth should be sufficient to investigate major cell types alongside marker genes pertaining to liver cell diversity and perform basic pixel-level decoding of the spatial transcriptome. This dataset comes along with a set of aligned Hematoxylin and Eosin (H&amp;E) stained histology images. </p>"},{"location":"installation/example_data/#deep-liver-section-dataset","title":"Deep Liver Section Dataset","text":"<p>The initial examination of the shallow dataset was encouraging, prompting a more extensive sequencing of the sample tissue to fully saturate the library (i.e., approximately 2.61 billion paired-end reads). The deep dataset was produced using all pairs of 2nd-seq FASTQ files. While datasets with shallower sequencing depths offer valuable insights, deep sequencing allows for a more thorough exploration of the data. This dataset also includes a set of aligned H&amp;E stained histology images. </p>"},{"location":"installation/example_data/#download-datasets","title":"Download Datasets","text":"<p>All datasets are provided under a single DOI, accessible via this URL: https://doi.org/10.5281/zenodo.10841777. The most recent version of the dataset is version 3.</p> <p>Since Pixel-level Analysis and Cell Segmentation-based Analysis require different input files, we have provided these files in separate tarball archives. Only the shallow liver dataset and deep liver dataset include input files for the Cell Segmentation-based Analysis due to the availability of histology files.</p>"},{"location":"installation/example_data/#input-for-spatial-transcriptomic-analysis","title":"Input for Spatial Transcriptomic analysis","text":"<p>The tarball files with this naming convention is input files for Pixel-level Analysis: </p> <pre><code>&lt;prefix&gt;_pixel_&lt;release_date&gt;.tar.gz\n</code></pre> <ul> <li>Minimal Test Run Dataset : </li> </ul> <pre><code>## To download the tarball from Zenodo, you can use the following command.\ncurl -o minimal_pixel_20240718.tar.gz https://zenodo.org/records/12773392/files/minimal_pixel_20240718.tar.gz?download=1\n\n## (Optional) Verify the integrity of the tarball file.\ncurl -o minimal_pixel_20240718.tar.gz.md5 https://zenodo.org/records/12773392/files/minimal_pixel_20240718.tar.gz.md5?download=1\nmd5sum -c minimal_pixel_20240718.tar.gz.md5\n\n## Uncompress the tarball using the following command.\ntar -zxvf minimal_pixel_20240718.tar.gz\n</code></pre> <ul> <li>Shallow Liver Section Dataset:</li> </ul> <pre><code>## To download the tarball from Zenodo, you can use the following command.\ncurl -o  shallow_pixel_20240718.tars.gz https://zenodo.org/records/12773392/files/shallow_pixel_20240718.tar.gz?download=1\n\n## (Optional) Verify the integrity of the tarball file.\ncurl -o  shallow_pixel_20240718.tar.gz.md5 https://zenodo.org/records/12773392/files/shallow_pixel_20240718.tar.gz.md5?download=1\nmd5sum -c  shallow_pixel_20240718.tar.gz.md5\n\n## Uncompress the tarball using the following command.\ntar -zxvf  shallow_pixel_20240718.tar.gz\n</code></pre> <ul> <li>Deep Liver Section Dataset:</li> </ul> <pre><code>## To download the tarball from Zenodo, you can use the following command.\ncurl -o deep_pixel_20240718.tar.gz https://zenodo.org/records/12773392/files/deep_pixel_20240718.tar.gz?download=1\n\n## (Optional) Verify the integrity of the tarball file.\ncurl -o deep_pixel_20240718.tar.gz.md5 https://zenodo.org/records/12773392/files/deep_pixel_20240718.tar.gz.md5?download=1\nmd5sum -c deep_pixel_20240718.tar.gz.md5\n\n## Uncompress the tarball using the following command.\ntar -zxvf deep_pixel_20240718.tar.gz\n</code></pre>"},{"location":"installation/example_data/#input-for-cell-segmentation-based-analysis","title":"Input for Cell Segmentation-based Analysis","text":"<p>The tarball files with this naming convention is input files for Cell Segmentation-based Analysis: </p> <pre><code>&lt;prefix&gt;_cellseg_&lt;release_date&gt;.tar.gz\n</code></pre> <ul> <li>Shallow Liver Section Dataset:</li> </ul> <pre><code>## To download the tarball from Zenodo, you can use the following command.\ncurl -o  shallow_cellseg_20240718.tars.gz https://zenodo.org/records/12773392/files/shallow_cellseg_20240718.tar.gz?download=1\n\n## (Optional) Verify the integrity of the tarball file.\ncurl -o  shallow_cellseg_20240718.tar.gz.md5 https://zenodo.org/records/12773392/files/shallow_cellseg_20240718.tar.gz.md5?download=1\nmd5sum -c  shallow_cellseg_20240718.tar.gz.md5\n\n## Uncompress the tarball using the following command.\ntar -zxvf  shallow_cellseg_20240718.tar.gz\n</code></pre> <ul> <li>Deep Liver Section Dataset:</li> </ul> <pre><code>## To download the tarball from Zenodo, you can use the following command.\ncurl -o deep_cellseg_20240718.tar.gz https://zenodo.org/records/12773392/files/deep_cellseg_20240718.tar.gz?download=1\n\n## (Optional) Verify the integrity of the tarball file.\ncurl -o deep_cellseg_20240718.tar.gz.md5 https://zenodo.org/records/12773392/files/deep_cellseg_20240718.tar.gz.md5?download=1\nmd5sum -c deep_cellseg_20240718.tar.gz.md5\n\n## Uncompress the tarball using the following command.\ntar -zxvf deep_cellseg_20240718.tar.gz\n</code></pre>"},{"location":"installation/installation/","title":"Installing NEDA","text":""},{"location":"installation/installation/#1-install-the-novascope-exemplary-downstream-analysis-neda","title":"1. Install the NovaScope-exemplary-downstream-analysis (NEDA)","text":"<p>Use <code>--recursive</code> to make sure both NEDA and its submodule are cloned. </p> <pre><code>git clone --recursive git@github.com:seqscope/NovaScope-exemplary-downstream-analysis.git \n</code></pre>"},{"location":"installation/installation/#2-install-software-and-dependencies","title":"2. Install Software and Dependencies","text":""},{"location":"installation/installation/#21-install-dependent-softwares","title":"2.1 Install Dependent Softwares","text":"<p>Ensure the installation of the below software to facilitate analysis. The versions listed below have been confirmed for compatibility with NEDA while alternative versions may also work with it.</p> <p>High-performance computing (HPC) users could load these tools using <code>module load</code>. It's advisable to first check availability with <code>module available</code> or <code>module spider</code>.</p> <ul> <li>Samtools (v1.14)</li> <li>Python (v3.10) </li> <li>R (v4.2)</li> </ul>"},{"location":"installation/installation/#22-install-ficture-and-its-dependencies","title":"2.2 Install FICTURE and Its Dependencies","text":"<p>Info</p> <p>Please view FICTURE's official documentation for the latest instruction.</p>"},{"location":"installation/installation/#221-install-ficture","title":"2.2.1 Install FICTURE","text":"<p>NEDA has included FICTURE as a submodule. We suggest the users to double check the <code>submodule/ficture</code> folder to make sure the FICTURE has been cloned successfully:</p> <pre><code>## define the path of NEDA \nneda_dir=/path/to/neda\n\n## double-check the ficture directory\nls -hlt $neda_dir/submodules/ficture\n</code></pre>"},{"location":"installation/installation/#222-create-a-python-environment","title":"2.2.2 Create a Python Environment","text":"<p>Set up a Python environment for FICTURE as per the requirement file. The requirement file is included in the FICTURE repository.</p> <p>First, ensure the requirements file is accessible:</p> <pre><code>## path to the requirement file in the FICTURE repository\nficture_reqfile=$neda_dir/submodules/ficture/requirements.txt\n\n## verify the existence of the requirement file.\nif [ -f \"$ficture_reqfile\" ]; then\n    echo -e \"The requirement file for FICTURE exists.\"\nelse\n    echo -e \"Error: The requirement file for FICTURE does not exist.\\n\"\n    echo -e \"Now downloading such requirement file...\"\n    curl -o $ficture_reqfile https://raw.githubusercontent.com/seqscope/ficture/8ceb419618c1181bb673255427b53198c4887cfa/requirements.txt\nfi\n</code></pre> <p>Now, install the required packages. Below is an example of creating a new Python environment using <code>venv</code>. It's also possible to establish such environments through alternative methods, including <code>conda</code>, <code>virtualenv</code>, and <code>pyenv</code>.</p> <pre><code>## set the path to the Python virtual environment directory\npyenv_dir=/path/to/python/virtual/environment/directory\npyenv_name=name_of_python_venv\n\n## create the Python virtual environment (need to be done only once)\nmkdir -p ${pyenv_dir}\ncd ${pyenv_dir}\npython -m venv ${pyenv_name}\n\n## activate the Python environment (every time you want to use the environment)\nsource ${pyenv_name}/bin/activate\n\n## install the required packages (need to be done only once)\npip install -r $ficture_reqfile\n</code></pre>"},{"location":"installation/installation/#23-install-r-packages","title":"2.3 Install R Packages","text":"<p>To enable Seurat analysis, install the following required R packages:</p> <ul> <li>Seurat</li> <li>ggplot2</li> <li>patchwork</li> <li>dplyr</li> <li>tidyverse</li> <li>stringr</li> <li>cowplot</li> <li>optparse</li> <li>RColorBrewer</li> </ul> <pre><code>## install all required packages in R\ninstall.packages(c( \"Seurat\", \"optparse\", \"patchwork\", \"dplyr\", \"tidyverse\", \"stringr\", \n                    \"ggplot2\", \"cowplot\", \"RColorBrewer\"))\n</code></pre>"}]}