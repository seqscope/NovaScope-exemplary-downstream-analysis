{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Guide for NovaScope Exemplary Downstream Analysis (NEDA)","text":"<p>This is an exemplary downstream analysis for Spatial Transcriptomics data from NovaScope. </p> <p>Currently, this NovaScope Exemplary Downstream Analysis (NEDA) offers two analytical strategies:</p> <p>1) Latent Dirichlet allocation (LDA) + FICTURE:     This strategy utilizes LDA for the identification of spatial factors. Subsequently, FICTURE is employed to map these identified factors onto a histological space with pixel-level resolution.</p> <p>2) Seurat + FICTURE:      In this strategy, multi-dimensional clustering via Seurat is applied to explore cell type clusters. These clusters are then projected into a histological space, achieving pixel-level resolution through the use of FICTURE.</p>"},{"location":"#preparation","title":"Preparation","text":"<p>First, please refer to <code>prestep1-setup.md</code> for guidance on installing the required software and packages, and downloading gene reference data. </p> <p>Next, proceed with <code>prestep2-input.md</code> to prepare the input data and configuration file for NEDA analysis. </p>"},{"location":"#a-brief-overview","title":"A Brief Overview","text":"<p> Figure 1: A Brief overview of the inputs, outputs, and process steps in NEDA. The strategies \"LDA + FICTURE\" and \"Seurat + FICTURE\" share the scripts of step1.preprocessing step3.transform, and step4.pixel-level decoding. Their differences lie in two main areas: 1) the configuration file used for input; and 2) the procedures and output files in the second step. Details for each step are provided in the step-by-step instructions. SGE: spatial digital gene expression. </p>"},{"location":"#step-by-step-instructions","title":"Step-by-Step Instructions","text":"<p>First choose the analytical strategy that fits your case. We include examples that detail the step-by-step process for both the \"LDA + FICTURE\" and \"Seurat + FICTURE\" analytical strategies, each presented separately. We recommend executing these steps sequentially. </p> <p>For each step, the instructions include both the purpose and the execution command. To ensure clarity, the instructions specifically detail the required input files and the output files that will be generated.</p> <p>The example input configuration file sets the essential parameters, while certain steps might need auxiliary parameters. In such cases, NEDA employs FICTURE's recommended defaults for these extra settings, wherever applicable. Should you wish to customize these auxiliary parameters beyond the defaults, please proceed with caution as it involves risk. For detailed information on modifying auxiliary parameters, kindly refer to the <code>AUXILIARY PARAMS</code> section found in the script for each respective step. For instance, the script step2.1-create-hexagons.sh for generating hexagonal spatial digital gene expression (SGE) matrix for LDA needs extra auxiliary parameters, which are specified between lines 26 and 30. For each auxiliary parameter, please consult the original publication of FICTURE.</p>"},{"location":"#notes","title":"Notes","text":"<ul> <li>The \"Seurat + FICTURE\" strategy involves two points at which manual assessment is required.</li> <li>This tutorial assumes the X-axis as the major axis due to its greater length in our example data. Sorting and tabix steps are thus aligned with the X-axis in this downstream analysis. The major axis can be defined as Y-axis via the input configuration file.</li> </ul>"},{"location":"LDA/step1-preprocess/","title":"Latent Dirichlet Allocation (LDA) + FICTURE Analytical Strategy","text":"<p>Please make sure set up the working environment before each step (see below).</p> <pre><code>## Load modules, if applicable.\n## For non-HPC user, use `export` to set the paths for following softwares, e.g., `export samtools=&lt;path_to_samtools&gt;`.\nmodule load Bioinformatics                          ## In this example, samtools is part of the Bioinformatics module system, requiring the Bioinformatics module to be loaded before accessing the specific program.\nmodule load samtools\n\n## If your Python environment was not set up using venv, replace the following lines with the appropriate commands to activate the environment.\npy_env=\"&lt;path_to_python_env&gt;\"                       ## Replace &lt;path_to_python_env&gt; with the path to the python environment\nsource ${py_env}/bin/activate\nexport python=${py_env}/bin/python\n\nneda_dir=\"&lt;path_to_the_NEDA_repository&gt;\"            ## Replace &lt;path_to_the_NEDA_repository&gt; with the path to the NovaScope-exemplary-downstream-analysis repository\n\ninput_configfile=\"&lt;path_to_input_data_and_params&gt;\"  ## Replace &lt;path_to_input_data_and_params&gt; with the path to the input_data_and_params file, e.g., ${neda_dir}/input_data_and_params/input_data_and_params_lda.txt\n</code></pre>"},{"location":"LDA/step1-preprocess/#step-1-preprocessing","title":"Step 1. Preprocessing","text":""},{"location":"LDA/step1-preprocess/#step-11-convert-the-sge-matrix-into-a-ficture-compatible-format","title":"Step 1.1 convert the SGE matrix into a FICTURE-compatible format","text":"<p>Input &amp; Output</p> <pre><code># Input:\n${input_dir}/features.tsv.gz\n${input_dir}/barcodes.tsv.gz\n${input_dir}/matrix.mtx.gz\n\n#Output:\n${output_dir}/${prefix}.merged.matrix.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step1.1-convert-SGE.sh $input_configfile\n</code></pre>"},{"location":"LDA/step1-preprocess/#step-12-filtering","title":"Step 1.2 Filtering","text":"<p>Prepare a quality-controlled (QCed) feature file and SGE matrix into a FICTURE-compatible format, filtered by gene types and density. </p> <p>Input &amp; Output</p> <pre><code># Input: \n${input_dir}/features.tsv.gz\n${input_dir}/barcodes.tsv.gz\n${input_dir}/matrix.mtx.gz\n${output_dir}/${prefix}.merged.matrix.tsv.gz\n\n#Output: \n${output_dir}/${prefix}.feature.clean.tsv.gz\n${output_dir}/${prefix}.QCed.matrix.tsv.gz\n${output_dir}/${prefix}.boundary.strict.geojson\n${output_dir}/${prefix}.coordinate_minmax.tsv\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step1.2-filter-feature-and-SGE.sh $input_configfile\n</code></pre>"},{"location":"LDA/step1-preprocess/#step-13-create-minimatch","title":"Step 1.3 Create minimatch","text":"<p>Reformat the input file by assigning minibatch label, and by reordering the data based on the major axis so that they are locally contiguous.</p> <p>Input &amp; Output</p> <pre><code>#Input: \n${output_dir}/${prefix}.QCed.matrix.tsv.gz\n\n#Output: \n${output_dir}/${prefix}.batched.matrix.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step1.3-create-minibatch.sh $input_configfile\n</code></pre>"},{"location":"LDA/step2a-LDA/","title":"Latent Dirichlet Allocation (LDA) + FICTURE analytical strategy","text":""},{"location":"LDA/step2a-LDA/#step-2a-infer-cell-type-factors-using-latent-dirichlet-allocation-lda","title":"Step 2a. Infer Cell Type Factors using Latent Dirichlet Allocation (LDA).","text":"<p>This example illustrates infering cell type factors using Latent Dirichlet Allocation (LDA). </p> <p>Since this step, the output files will be stored at <code>${model_dir}</code>, which is defined as <code>${output_dir}/${train_model}</code>.</p> <p>Prefix:</p> <p>To clarify the input and output filenames, we utilize prefixes in this documentation. Below, we illustrate how these prefixes are defined. Users do NOT need to manually define these prefixes; they are automatically defined by the script.</p> <pre><code>hexagon_prefix=\"${prefix}.hexagon.${sf}.d_${tw}\"\ntrain_prefix=\"${prefix}.${sf}.nF${nf}.d_${tw}.s_${ep}\"\n</code></pre>"},{"location":"LDA/step2a-LDA/#step-2a1-create-hexagonal-spatial-gene-expression-sge-matrix","title":"step 2a.1 Create hexagonal spatial gene expression (SGE) matrix","text":"<p>Given a specified size of hexagons, segment the raw spatial gene expression (SGE) matrix into hexagonal SGE.</p> <p>Input &amp; Output</p> <pre><code># Input:\n${output_dir}/${prefix}.QCed.matrix.tsv.gz\n${output_dir}/${prefix}.boundary.strict.geojson\n\n# Output: \n${model_dir}/${hexagon_prefix}.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step2a.1-create-hexagons.sh $input_configfile\n</code></pre>"},{"location":"LDA/step2a-LDA/#step-2a2-lda-factorization","title":"step 2a.2 LDA Factorization","text":"<p>An unsupervised learning of cell type factors using LDA.</p> <p>Input &amp; Output:</p> <pre><code># Input:\n${output_dir}/${prefix}.feature.clean.tsv.gz\n${model_dir}/${hexagon_prefix}.tsv.gz\n\n# Output: \n${model_dir}/${train_prefix}.model.p\n${model_dir}/${train_prefix}.fit_result.tsv.gz\n${model_dir}/${train_prefix}.posterior.count.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step2a.2-LDA-factorization.sh $input_configfile\n</code></pre>"},{"location":"LDA/step2a-LDA/#step-2a3-lda-factorization-report","title":"step 2a.3 LDA factorization report","text":"<p>This step includes: generating a color table, identifying marker genes for each factor, and creating a report html file, which summarizes individual factors and marker genes.</p> <p>Input &amp; Output:</p> <pre><code># Input:\n${model_dir}/${train_prefix}.fit_result.tsv.gz\n${model_dir}/${train_prefix}.posterior.count.tsv.gz\n\n# Output: \n${model_dir}/${train_prefix}.color.tsv\n${model_dir}/${train_prefix}.bulk_chisq.tsv\n${model_dir}/${train_prefix}.factor.info.html\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step2a.3-LDA-factorization-report.sh $input_configfile\n</code></pre>"},{"location":"LDA/step3-transform/","title":"Latent Dirichlet Allocation (LDA) + FICTURE analytical strategy","text":""},{"location":"LDA/step3-transform/#step-3-transform","title":"Step 3 Transform","text":"<p>Prefix:</p> <p>The <code>tranform_prefix</code> will be automatically defined by the script as below.</p> <pre><code>tranform_prefix=\"${train_prefix}.prj_${pw}.r_${ar}\"\n</code></pre>"},{"location":"LDA/step3-transform/#step-31-transform","title":"Step 3.1 Transform","text":"<p>Convert to a factor space using the provided model, which includes gene names and potentially Dirichlet parameters. The pixel-level data will be organized into (potentially overlapping) hexagonal groups.</p> <p>Input &amp; Output</p> <pre><code>#Input:\n${output_dir}/${prefix}.QCed.matrix.tsv.gz\n${model_dir}/${train_prefix}.model.p                    # The format of the model file varies between LDA and Seurat.\n\n#Output:\n${model_dir}/${tranform_prefix}.fit_result.tsv.gz\n${model_dir}/${tranform_prefix}.posterior.count.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step3.1-transform.sh $input_configfile\n</code></pre>"},{"location":"LDA/step3-transform/#step-32-transform-visualization","title":"Step 3.2 transform visualization","text":"<p>For LDA, simply use the color table created at step 2a.3 to visualize the transformed data. This color table will also be used in Step4.</p> <p>Input &amp; Output</p> <pre><code># Input:\n${model_dir}/${tranform_prefix}.fit_result.tsv.gz\n${model_dir}/${tranform_prefix}.posterior.count.tsv.gz\n${output_dir}/${prefix}.coordinate_minmax.tsv\n\n#Output:\n${model_dir}/${tranform_prefix}.rgb.tsv\n${model_dir}/${tranform_prefix}.top.png\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step3.2-transform-visualization.sh $input_configfile\n</code></pre>"},{"location":"LDA/step4-decode/","title":"Latent Dirichlet Allocation (LDA) + FICTURE analytical strategy","text":""},{"location":"LDA/step4-decode/#step-4-pixel-level-decoding","title":"Step 4 Pixel-level Decoding","text":"<p>Prefix:</p> <p>The decode_prefix will be automatically defined as below.</p> <pre><code>decode_prefix=\"${train_prefix}.decode.prj_${pw}.r_${ar}_${nr}\"\n</code></pre> <ul> <li><code>nr</code>: represents neighbor_radius. By default, <code>nr=ar+1</code>.</li> </ul>"},{"location":"LDA/step4-decode/#step-41-pixel-level-decoding","title":"step 4.1 Pixel-level Decoding.","text":"<p>Decoding the model matrix on individual pixels, which returns a tab-delimited file of the posterior count of factors on individual pixels.</p> <p>Input &amp; Output</p> <pre><code># Input:\n${output_dir}/${prefix}.coordinate_minmax.tsv\n${output_dir}/${prefix}.batched.matrix.tsv.gz\n${output_dir}/${prefix}.QCed.matrix.tsv.gz\n${model_dir}/${tranform_prefix}.model.p         # The format of the model file varies between LDA and Seurat.\n${model_dir}/${tranform_prefix}.fit_result.tsv.gz\n\n#Output: \n${model_dir}/${decode_prefix}.pixel.sorted.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step4.1-pixel-level-decode.sh $input_configfile\n</code></pre>"},{"location":"LDA/step4-decode/#step-42-visualizing-pixel-level-decoding-and-generating-marker-gene-reports","title":"step 4.2 Visualizing Pixel-Level Decoding and Generating Marker Gene Reports","text":"<p>Identifying marker genes for each factor/cluster, and generating a report html file that summarizes individual factors and marker genes. In addition, this step creates a high-resolution image of cell type factors for individual pixels.</p> <p>Input &amp; Output</p> <pre><code>#Input:\n${model_dir}/${decode_prefix}.posterior.count.tsv.gz\n${model_dir}/${tranform_prefix}.rgb.tsv\n\n#Output: \n${model_dir}/${decode_prefix}.bulk_chisq.tsv\n${model_dir}/${decode_prefix}.factor.info.html\n${model_dir}/${decode_prefix}.pixel.png\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step4.2-pixel-level-visualization-and-report.sh $input_configfile\n</code></pre>"},{"location":"Seurat/step1-preprocess/","title":"Seurat + FICTURE analytical strategy","text":"<p>Please make sure set up the working environment before each step (see below).</p> <pre><code>## Load modules if applicable.\n## For non-HPC user, use `export` to set the paths for following softwares, e.g., `export samtools=&lt;path_to_samtools&gt;`.\n\nmodule load Bioinformatics                          ## In this example, samtools is part of the Bioinformatics module system, requiring the Bioinformatics module to be loaded before accessing the specific program.\nmodule load samtools\nmodule load R/4.2.0                                 \n\n## If you are using a local R, use `export R=&lt;path_to_R&gt;` to define R.\n\n## If you are using a conda environment, replace the following lines with the appropriate commands to activate the environment.\npy_env=\"&lt;path_to_python_env&gt;\"                       ## Replace &lt;path_to_python_env&gt; with the path to the python environment\nsource ${py_env}/bin/activate\nexport python=${py_env}/bin/python\n\nneda_dir=\"&lt;path_to_the_NEDA_repository&gt;\"            ## Replace &lt;path_to_the_NEDA_repository&gt; with the path to the NovaScope-exemplary-downstream-analysis repository\n\ninput_configfile=\"&lt;path_to_input_data_and_params&gt;\"  ## Replace &lt;path_to_input_data_and_params&gt; with the path to the input_data_and_params file, e.g., ${neda_dir}/input_data_and_params/input_data_and_params_lda.txt\n</code></pre>"},{"location":"Seurat/step1-preprocess/#step-1-preprocessing","title":"Step 1. Preprocessing","text":""},{"location":"Seurat/step1-preprocess/#step-11-convert-the-sge-matrix-into-a-ficture-compatible-format","title":"Step 1.1 convert the SGE matrix into a FICTURE-compatible format","text":"<p>Input &amp; Output</p> <pre><code># Input:\n${input_dir}/features.tsv.gz\n${input_dir}/barcodes.tsv.gz\n${input_dir}/matrix.mtx.gz\n\n#Output:\n${output_dir}/${prefix}.merged.matrix.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step1.1-convert-SGE.sh $input_configfile\n</code></pre>"},{"location":"Seurat/step1-preprocess/#step-12-filtering","title":"Step 1.2 Filtering","text":"<p>Prepare a quality-controlled (QCed) feature file and SGE matrix into a FICTURE-compatible format, filtered by gene types and density.</p> <p>Input &amp; Output</p> <pre><code># Input: \n${input_dir}/features.tsv.gz\n${input_dir}/barcodes.tsv.gz\n${input_dir}/matrix.mtx.gz\n${output_dir}/${prefix}.merged.matrix.tsv.gz\n\n#Output: \n${output_dir}/${prefix}.feature.clean.tsv.gz\n${output_dir}/${prefix}.QCed.matrix.tsv.gz\n${output_dir}/${prefix}.boundary.strict.geojson\n${output_dir}/${prefix}.coordinate_minmax.tsv\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step1.2-filter-feature-and-SGE.sh $input_configfile\n</code></pre>"},{"location":"Seurat/step1-preprocess/#step-13-create-minimatch","title":"Step 1.3 Create minimatch","text":"<p>Reformat the input file by assigning minibatch label, and by reordering the data based on the major axis so that they are locally contiguous.</p> <p>Input &amp; Output</p> <pre><code>#Input: \n${output_dir}/${prefix}.QCed.matrix.tsv.gz\n\n#Output: \n${output_dir}/${prefix}.batched.matrix.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step1.3-create-minibatch.sh $input_configfile\n</code></pre>"},{"location":"Seurat/step2b-seurat/","title":"Seurat + FICTURE analytical strategy","text":""},{"location":"Seurat/step2b-seurat/#step-2b-infer-cell-type-factors-using-seurat","title":"Step 2b. Infer cell type factors using Seurat","text":"<p>This example illustrates infering cell type factors using Seurat. This process contains two stops, which require manual evaluation. One stop is at step 2b.2 and the other at step 2b.4. </p> <p>Since this step, the output files will be stored at <code>${model_dir}</code>, which is defined as <code>${output_dir}/${train_model}</code>.</p> <p>Prefix:</p> <p>This documentation uses the following prefixes to illustrate input and output filenames, which are automatically assigned by the script.</p> <p>The <code>nf</code> will be determined in step2b.5</p> <pre><code>hexagon_prefix=\"${prefix}.hexagon.${sf}.d_${tw}\"\ntrain_prefix=\"${prefix}.${sf}.nF${nf}.d_${tw}.s_${ep}\"    \n</code></pre>"},{"location":"Seurat/step2b-seurat/#step-2b1-create-hexagonal-spatial-gene-expression-sge-matrix-and-test-different-cutoffs-for-nfeature_rna","title":"step 2b.1 Create hexagonal spatial gene expression (SGE) matrix and test different cutoffs for nFeature_RNA","text":"<p>This step creates hexagonal spatial gene expression (SGE) matrix that is compatible with Seurat. It analyzes the distribution of Ncount and Nfeature, and tests filtering the SGE using different nFeature_RNA cutoffs, including 50, 100, 200, 300, 400, 500, 750, and 1000.</p> <p>Input &amp; Output</p> <pre><code># Input:\n${output_dir}/${prefix}.merged.matrix.tsv.gz\n${output_dir}/${prefix}.feature.tsv.gz\n\n# Output: \n# * Hexagonal SGE: \n        ${model_dir}/features.tsv.gz\n        ${model_dir}/barcodes.tsv.gz\n        ${model_dir}/matrix.mtx.gz\n# * Evaluation files: \n        ${model_dir}/Ncount_Nfeature_vln.png\n        ${model_dir}/nFeature_RNA_dist.png\n        # * for each cut off ${cutoff} in 50, 100, 200, 300, 400, 500, 750, and 1000:\n                ${model_dir}/nFeature_RNA_cutoff${cutoff}.png\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step2b.1-creat-hexagons-for-Seurat.sh $input_configfile\n</code></pre>"},{"location":"Seurat/step2b-seurat/#step-2b2-manually-select-the-cutoffs","title":"step 2b.2 Manually select the cutoffs","text":"<p>Examine the density plots generated by <code>step2b-Seurat-01-hexagon.sh</code> to choose a cutoff for nFeature_RNA, aiming to remove noise signals. For our example data, we applied a cut off of 500 for deep sequencing data, and 100 for shallow sequencing data. </p> <p>It is optional to define x y ranges. </p> <p>Add those variables to the <code>input_data_and_params</code> file.</p> <p>Example:</p> <pre><code># In this case, the Y_max is not applied. \nnFeature_RNA_cutoff=100\nX_min=2.5e+06\nX_max=1e+07\nY_min=1e+06\n</code></pre>"},{"location":"Seurat/step2b-seurat/#step-2b3-seurat-clustering-analysis","title":"step 2b.3 Seurat clustering analysis","text":"<p>The <code>Seurat_analysis.R</code> script, by default, evaluates clustering at various resolutions, specifically 0.25, 0.5, 0.75, 1, 1.25, 1.5, and 1.75. </p> <p>For each resolution level, it creates a Dimensionality Reduction and Spatial plot to illustrate the clusters through Uniform Manifold Approximation and Projection (UMAP) along with their spatial distribution. It also produces a Differential Expression (DE) file that lists the marker genes for each cluster.</p> <p>Additionally, this step generates a metadata file containing information on the cluster assignment for each hexagon, and an RDS file that stores the complete Seurat object with all the compiled data.</p> <p>Input &amp; Output</p> <pre><code># Input: \n${model_dir}/features.tsv.gz\n${model_dir}/barcodes.tsv.gz\n${model_dir}/matrix.mtx.gz\n\n#Output: \n# * A metadata file:\n        ${model_dir}/${prefix}_cutoff${nFeature_RNA_cutoff}_metadata.csv\n# * An RDS file:\n        ${model_dir}/${prefix}_cutoff${nFeature_RNA_cutoff}_SCT.RDS\n# * For each resolution (`$res`) in 0.25, 0.5, 0.75, 1, 1.25, 1.5, and 1.75:\n        ${model_dir}/${prefix}_cutoff${nFeature_RNA_cutoff}_res${res}_DE.csv\n        ${model_dir}/${prefix}_cutoff${nFeature_RNA_cutoff}_res${res}_DimSpatial.png\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step2b.3-Seurat-clustering.sh $input_configfile\n</code></pre>"},{"location":"Seurat/step2b-seurat/#step-2b4-manually-select-the-resolution-for-clustering","title":"step 2b.4 Manually select the resolution for clustering","text":"<p>Examine the Dimensionality Reduction and Spatial plots from the previous step and choose a resolution to continue with. Then, save this chosen resolution into the <code>input_data_and_params</code> file as the res_of_interest variable. </p> <p>Example:</p> <pre><code>res_of_interest=1\n</code></pre>"},{"location":"Seurat/step2b-seurat/#step-2b5-prepare-a-count-matrix-with-the-selected-resolution","title":"step 2b.5 Prepare a count matrix with the selected resolution","text":"<p>Transform the metadata into a count matrix to serve as the model matrix for the subsequent step. </p> <p>Additionally, the number of clusters from the model matrix will be obtained and assigned to the <code>nf</code> variable in the <code>input_data_and_params</code> file.</p> <p>Input &amp; Output</p> <pre><code>#Input:\n${model_dir}/features.tsv.gz\n${model_dir}/barcodes.tsv.gz\n${model_dir}/matrix.mtx.gz\n${model_dir}/${prefix}_cutoff${nFeature_RNA_cutoff}_metadata.csv\n\n#Output: \n${model_dir}/${train_prefix}.model.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step2b.5-Seurat-count-matrix.sh $input_configfile\n</code></pre>"},{"location":"Seurat/step3-transform/","title":"Seurat + FICTURE analytical strategy","text":""},{"location":"Seurat/step3-transform/#step-3-transform","title":"Step 3 Transform","text":"<p>Prefix:</p> <p>The <code>tranform_prefix</code> will be automatically defined by the script as below.</p> <pre><code>tranform_prefix=\"${train_prefix}.prj_${pw}.r_${ar}\"\n</code></pre>"},{"location":"Seurat/step3-transform/#step-31-transform","title":"Step 3.1 Transform","text":"<p>Convert to a factor space using the provided model, which includes gene names and potentially Dirichlet parameters. The pixel-level data will be organized into (potentially overlapping) hexagonal groups.</p> <p>Input &amp; Output</p> <pre><code>#Input:\n${output_dir}/${prefix}.QCed.matrix.tsv.gz\n${model_dir}/${train_prefix}.model.tsv.gz               # The format of the model file varies between LDA and Seurat.\n\n#Output:\n${model_dir}/${tranform_prefix}.fit_result.tsv.gz\n${model_dir}/${tranform_prefix}.posterior.count.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step3.1-transform.sh $input_configfile\n</code></pre>"},{"location":"Seurat/step3-transform/#step-32-transform-visualization","title":"Step 3.2 transform visualization","text":"<p>For Seurat, create a color table and visualize the transformed data. </p> <p>Input &amp; Output</p> <pre><code># Input:\n${model_dir}/${tranform_prefix}.fit_result.tsv.gz\n${model_dir}/${tranform_prefix}.posterior.count.tsv.gz\n${output_dir}/${prefix}.coordinate_minmax.tsv\n\n#Output:\n${model_dir}/${tranform_prefix}.rgb.tsv\n${model_dir}/${tranform_prefix}.top.png\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step3.2-transform-visualization.sh $input_configfile\n</code></pre>"},{"location":"Seurat/step4-decode/","title":"Seurat + FICTURE analytical strategy","text":""},{"location":"Seurat/step4-decode/#step-4-pixel-level-decoding","title":"Step 4 Pixel-level Decoding","text":"<p>Prefix:</p> <p>The decode_prefix will be automatically defined as below.</p> <pre><code>decode_prefix=\"${train_prefix}.decode.prj_${pw}.r_${ar}_${nr}\"\n</code></pre> <ul> <li><code>nr</code>: represents neighbor_radius. By default, <code>nr=ar+1</code>.</li> </ul>"},{"location":"Seurat/step4-decode/#step-41-pixel-level-decoding","title":"step 4.1 pixel-level Decoding.","text":"<p>Decoding the model matrix on individual pixels, which returns a tab-delimited file of the posterior count of factors on individual pixels.</p> <p>Input &amp; Output</p> <pre><code># Input:\n${output_dir}/${prefix}.coordinate_minmax.tsv\n${output_dir}/${prefix}.batched.matrix.tsv.gz\n${output_dir}/${prefix}.QCed.matrix.tsv.gz\n${model_dir}/${tranform_prefix}.model.tsv.gz        # The format of the model file varies between LDA and Seurat.\n${model_dir}/${tranform_prefix}.fit_result.tsv.gz\n\n#Output: \n${model_dir}/${decode_prefix}.pixel.sorted.tsv.gz\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step4.1-pixel-level-decode.sh $input_configfile\n</code></pre>"},{"location":"Seurat/step4-decode/#step-42-visualizing-pixel-level-decoding-and-generating-marker-gene-reports","title":"step 4.2 Visualizing Pixel-Level Decoding and Generating Marker Gene Reports","text":"<p>Identifying marker genes for each factor/cluster, and generating a report html file that summarizes individual factors and marker genes. In addition, this step creates a high-resolution image of cell type factors for individual pixels.</p> <p>Input &amp; Output</p> <pre><code>#Input:\n${model_dir}/${decode_prefix}.posterior.count.tsv.gz\n${model_dir}/${tranform_prefix}.rgb.tsv\n\n#Output: \n${model_dir}/${decode_prefix}.bulk_chisq.tsv\n${model_dir}/${decode_prefix}.factor.info.html\n${model_dir}/${decode_prefix}.pixel.png\n</code></pre> <p>Command:</p> <pre><code>$neda_dir/steps/step4.2-pixel-level-visualization-and-report.sh $input_configfile\n</code></pre>"},{"location":"preparation/prestep1-setup/","title":"Installing NovaScope-exemplary-downstream-analysis (NEDA)","text":""},{"location":"preparation/prestep1-setup/#1-download-the-novascope-exemplary-downstream-analysis-neda-repository","title":"1. Download the NovaScope-exemplary-downstream-analysis (NEDA) repository","text":"<pre><code>git clone git@github.com:seqscope/NovaScope-exemplary-downstream-analysis.git \n\ncd NovaScope-exemplary-downstream-analysis\nneda_dir=$(realpath ./) \n</code></pre>"},{"location":"preparation/prestep1-setup/#2-install-softwares-and-dependencies","title":"2. Install Softwares and Dependencies","text":""},{"location":"preparation/prestep1-setup/#21-install-softwares","title":"2.1 Install Softwares:","text":"<p>Ensure the installation of the below software to facilitate analysis. The versions listed below have been confirmed for compatibility with NEDA while alternative versions may also work with it.</p> <p>High-performance computing (HPC) users can easily load these programs using the <code>module load</code> command. It's advisable to first check availability with <code>module available</code> or <code>module spider</code>.</p> <ul> <li>Samtools (v1.14)</li> <li>Python (v3.10) </li> <li>R (v4.2)</li> <li>FICTURE </li> </ul> <p>Install FICTURE:</p> <pre><code>cd $neda_dir\ngit clone git@github.com:seqscope/ficture.git\n</code></pre>"},{"location":"preparation/prestep1-setup/#22-create-a-python-environment","title":"2.2 Create a Python Environment:","text":"<p>Set up a Python environment for FICTURE as per the requirement file.</p> <p>Here is an example of creating a Python environment using <code>venv</code>. It's also possible to establish such environments through alternative methods, including <code>conda</code>, <code>virtualenv</code>, and <code>pyenv</code>.</p> <pre><code>cd $neda_dir                                # Replace $neda_dir with the path to build your pyenv\npyenv_name=&lt;name_of_python_environment&gt;     # Replace &lt;name_of_python_environment&gt; with any name\npython -m venv $pyenv_name\nsource $pyenv_name/bin/activate\n\ncurl -o requirements.txt https://raw.githubusercontent.com/seqscope/ficture/8ceb419618c1181bb673255427b53198c4887cfa/requirements.txt\npip install -r ./requirements.txt\n</code></pre>"},{"location":"preparation/prestep1-setup/#23-install-r-packages","title":"2.3 Install R Packages:","text":"<p>To enable Seurat analysis, install the following required R packages:</p> <ul> <li>Seurat</li> <li>ggplot2</li> <li>patchwork</li> <li>dplyr</li> <li>tidyverse</li> <li>stringr</li> <li>cowplot</li> <li>optparse</li> <li>grDevices</li> <li>RColorBrewer</li> </ul>"},{"location":"preparation/prestep1-setup/#3-reference-data","title":"3. Reference Data","text":"<p>The downstream analysis also requires gene info reference. Please download the one matching your input file's species here.</p>"},{"location":"preparation/prestep2-input/","title":"Prepare the input","text":""},{"location":"preparation/prestep2-input/#1-input-datasets","title":"1. Input Datasets","text":"<p>Input data required for NovaScope-exemplary-downstream-analysis (NEDA) are spatial digital gene expression (SGE) matrix, including <code>features.tsv.gz</code>, <code>barcodes.tsv.gz</code>, and <code>matrix.mtx.gz</code>. Such SGE can be generated via NovaScope.</p> <p>Two sets of example SGE data are available through Zenodo, both derived from the same section chip but varying in the sequencing depth of their 2nd-Seq libraries:</p>"},{"location":"preparation/prestep2-input/#11-shallow-sequencing-depth-sample-data","title":"1.1 Shallow Sequencing Depth Sample Data","text":"<p>The <code>B08Cshallow_20240319_SGE.tar.gz</code> features a section chip sequenced at a relatively shallow depth in the 2nd-Seq library.</p> <pre><code>## Download the file via curl\ncurl -o B08Cshallow_20240319_SGE.tar.gz https://zenodo.org/records/10841778/files/B08Cshallow_20240319_SGE.tar.gz?download=1&amp;preview=1\n\n## (Optional) Verify the integrity of the file\ncurl -o B08Cshallow_20240319_SGE.tar.gz.md5 https://zenodo.org/records/10841778/files/B08Cshallow_20240319_SGE.tar.gz.md5?download=1&amp;preview=1\nmd5sum -c B08Cshallow_20240319_SGE.tar.gz.md5\n\n## Extraction\ntar -zxvf B08Cshallow_20240319_SGE.tar.gz\n</code></pre>"},{"location":"preparation/prestep2-input/#12-deep-sequencing-depth-sample-data","title":"1.2 Deep Sequencing Depth Sample Data","text":"<p>The <code>B08Cdeep_20240319_SGE.tar.gz</code> showcases a section chip with a deep sequencing depth in the 2nd-Seq library.</p> <pre><code>## Download the file\ncurl -o B08Cdeep_20240319_SGE.tar.gz https://zenodo.org/records/10841778/files/B08Cdeep_20240319_SGE.tar.gz?download=1&amp;preview=1\n\n## (Optional) Check the integrity\ncurl -o B08Cdeep_20240319_SGE.tar.gz.md5 https://zenodo.org/records/10841778/files/B08Cdeep_20240319_SGE.tar.gz.md5?download=1&amp;preview=1\nmd5sum -c B08Cdeep_20240319_SGE.tar.gz.md5\n\n## Extraction\ntar -zxvf B08Cdeep_20240319_SGE.tar.gz\n</code></pre>"},{"location":"preparation/prestep2-input/#2-an-input-configuration-file","title":"2. An input Configuration File","text":"<p>The input configuration file serves as the input for parameters and dataset paths. It should include: environment paths, input and output directory paths, output prefix, and analytical parameters.</p> <p>We provided an example configuration file for LDA+FICTURE analysis and Seurat+FICTURE analysis, separately. </p> <p>Below only include FICTURE's essential parameters, defaulting others to pre-set values. For detailed parameter information, refer to the AUXILIARY PARAMS section in the script or visit [FICTURE] (https://github.com/seqscope/ficture/tree/protocol).</p> <pre><code>## Environment Paths\npy_env=&lt;path_to_the_python_environment&gt;                             ## Python environment path\nficture=&lt;path_to_the_ficture_repository&gt;                            ## Path to FICTURE repository\nref_geneinfo=&lt;path_to_the_reference_dataset&gt;                        ## Path to the reference gene info dataset\n\n## Input/Output \ninput_dir=&lt;path_to_the_input_directory&gt;                             ## Directory for input files\noutput_dir=&lt;path_to_the_output_directory&gt;                           ## Directory for output files. The LDA-based results will be saved in \"${output_dir}/LDA\" while the Seurat-based results will be stored at \"${output_dir}/Seurat\"\nprefix=&lt;prefix_of_output_files&gt;                                     ## Prefix for output files. The output files will be named using both this prefix and the following analytical parameters.\n\n## analytical parameters\ntrain_model=&lt;model_option&gt;                                          ## Define the analytical strategy. Options: \"LDA\", \"Seurat\".\n\nsf=&lt;solo_feature&gt;                                                   ## Feature selection, e.g., \"gn\", which is short for \"gene\".\ntw=&lt;train_width&gt;                                                    ## The side length of the hexagon (in micrometers), e.g., 18.\nnf=&lt;number_of_factors&gt;                                              ## (LDA-only) Number of factors, e.g., 12. For \"Seurat + FICTURE\" analysis, eliminate this line at the preparation stage, as the nf will later be defined by the outcomes of the clustering process.\nep=&lt;number_of_epoch&gt;                                                ## (LDA-only) Epochs for LDA training, e.g., 3. For \"Seurat+FICTURE\" analysis, use \"NA\".\npw=&lt;projection_width&gt;                                               ## Projection width, suggest to use one the same as the train width, e.g., 18.\nar=&lt;archor_distance&gt;                                                ## Anchor point distance (in micrometers), e.g., 4.\n\nseed=&lt;an_integer&gt;                                                   ## A seed for reproducibility, e.g., 2024030700. This will be used in the LDA training and choosing colors for factors/cluster.\n\nmajor_axis=&lt;X_or_Y&gt;                                                 ## Generally, we defined the one with greater length as the major axis. Options: \"X\", \"Y\".\n</code></pre>"}]}